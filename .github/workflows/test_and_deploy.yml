name: Test & Deploy

on: [push, workflow_dispatch]

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

jobs:
  test_back:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Setup timezone
        uses: zcong1993/setup-timezone@master
        with:
          timezone: Europe/Paris

      - name: Install deps
        run: |
          cd run
          npm install

      - name: Run tests
        run: |
          cd run
          npm run test tests/
        env:
          ENCRYPTION_KEY: 382A5C31A96D38E3DF430E5101E8D07D
          ENCRYPTION_JWT_SECRET: 26F95488BA7D7E545B1B8669990739BB21A0A6D3EFB4910C0460B068BDDD3E1C
          AUTH_SECRET: 123
          STRIPE_WEBHOOK_SECRET: 123
          STRIPE_SECRET_KEY: 123

  test_front:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Setup timezone
        uses: zcong1993/setup-timezone@master
        with:
          timezone: Europe/Paris

      - name: Install deps
        run: yarn

      - name: Run tests
        run: npm run test:unit
        env:
          VUE_APP_API_ROOT: http://localhost:8081
          VUE_APP_ENABLE_BILLING: true
          TZ: CET

  create_release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test_front, test_back]
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.get_changelog.outputs.version }}
      changes: ${{ steps.get_changelog.outputs.changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get tag
        id: get_tag
        run: |
          echo "current_version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Get Changelog Entry
        id: get_changelog
        uses: mindsers/changelog-reader-action@v2
        with:
          validation_depth: 10
          version: ${{ steps.get_tag.outputs.current_version }}

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          body: ${{ steps.get_changelog.outputs.changes }}
          tag: ${{ steps.get_changelog.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}

  deploy_front:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [create_release]
    runs-on: ubuntu-latest
    environment: production
    outputs:
      deploy-url: ${{ steps.netlify_deploy.outputs.deploy-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install deps & build
        run: yarn && yarn build
        env:
          VUE_APP_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          VUE_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          VUE_APP_FIREBASE_DATABASE_URL: ${{ secrets.FIREBASE_DATABASE_URL }}
          VUE_APP_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          VUE_APP_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          VUE_APP_MESSAGING_SENDER_ID: ${{ secrets.MESSAGING_SENDER_ID }}
          VUE_APP_FIREBASE_APP_ID: ${{ secrets.VUE_APP_FIREBASE_APP_ID }}
          VUE_APP_LOGROCKET_ID: ${{ secrets.LOGROCKET_ID }}
          VUE_APP_API_ROOT: ${{ secrets.API_ROOT }}
          VUE_APP_ENABLE_BILLING: true
          VUE_APP_MAIN_DOMAIN: ${{ secrets.MAIN_DOMAIN }}
          VUE_APP_PUSHER_KEY: ${{ secrets.PUSHER_KEY }}
          VUE_APP_ENABLE_ANALYTICS: true
          VUE_APP_ENABLE_MARKETING: true
          COMMIT_REF: ${{ github.sha }}

      - uses: nwtgck/actions-netlify@v2.0.0
        id: netlify_deploy
        with:
          publish-dir: './dist'
          deploy-message: 'Deploying commit ${{ github.sha }}'
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  deploy_back:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [create_release]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3

      - name: Setup credentials
        run: |
          echo "$GCLOUD_CREDENTIALS" >> ethernal-95a14-19f78a7e26cc.json
        shell: bash
        env:
          GCLOUD_CREDENTIALS: ${{ secrets.GCLOUD_CREDENTIALS }}

      - uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Build & push docker image
        run: |
          flyctl auth docker
          docker build -t registry.fly.io/ethernal:${{ github.sha }} .
          docker push registry.fly.io/ethernal:${{ github.sha }}

  release_front:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [deploy_front, deploy_back]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Extract Netlify deploy id
        id: extract_deploy_id
        run: |
          ID=$(echo "${{ needs.deploy_front.outputs.deploy-url }}" | sed 's/https:\/\/\(.*\)--tryethernal\.netlify\.app/\1/')
          echo "DEPLOY_ID=$ID" >> $GITHUB_OUTPUT
        shell: bash

      - name: Release deploy
        run: |
          curl -H "Authorization: Bearer ${{ secrets.NETLIFY_AUTH_TOKEN }}" -X POST -d {} https://api.netlify.com/api/v1/sites/${{ secrets.NETLIFY_SITE_ID }}/deploys/${{ steps.extract_deploy_id.outputs.deploy_id }}/restore

  release_back:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [deploy_front, deploy_back, create_release]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3

      - uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Release deploy
        run: flyctl deploy -i registry.fly.io/ethernal:${{ github.sha }}

      - name: Create New Relic deployment marker
        uses: newrelic/deployment-marker-action@v1
        with:
          apiKey: ${{ secrets.NEW_RELIC_API_KEY }}
          accountId: ${{ secrets.NEW_RELIC_ACCOUNT_ID }}
          applicationId: ${{ secrets.NEW_RELIC_BACKEND_APPLICATION_ID }}
          revision: "${{ needs.create_release.outputs.current_version }}"
          changelog: "${{ needs.create_release.outputs.changes }}"
          description: "Deployed commit ${{ github.sha }}"
